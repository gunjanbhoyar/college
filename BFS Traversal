// BFS algorithm in C++

#include <iostream>
#include <list>

using namespace std;

class Graph {
  int V;
  list<int>* adj;
  //bool* visited;

   public:
  Graph(int V);
  void addEdge(int v, int w);
  void BFS(int s);
};
// Create a graph with given vertices,
// and maintain an adjacency list
Graph::Graph(int V) {
  this->V= V;
  adj = new list<int>[V];
}

// Add edges to the graph
void Graph::addEdge(int v, int w)
 {
  adj[v].push_back(w);
  //adjLists[dest].push_back(src);
}
// BFS algorithm
void Graph::BFS(int s)
 {
  bool*visited = new bool[V];
  for (int i = 0; i < V; i++)
    visited[i] = false;

  list<int> queue;

  visited[s] = true;
  queue.push_back(s);

  list<int>::iterator i;

  while (!queue.empty()) {
    s = queue.front();
    cout << s << " ";
    queue.pop_front();

    for (i = adj[s].begin(); i != adj[s].end(); ++i) 
    {
      //int adjVertex = *i;
      if (!visited[*i]) 
      {
        visited[*i] = true;
        queue.push_back(*i);
      }
    }
  }
}

int main() {
  Graph g(4);
  g.addEdge(0, 1);
  g.addEdge(0, 2);
  g.addEdge(1, 2);
  g.addEdge(2, 0);
  g.addEdge(2, 3);
  g.addEdge(3, 3);

  g.BFS(2);

  return 0;
}
